2024-11-07 16:23:53,689 - mmdet3d - INFO - Config:
seed = 0
deterministic = False
checkpoint_config = dict(interval=1, max_keep_ckpts=1)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
load_from = None
resume_from = None
cudnn_benchmark = False
fp16 = dict(loss_scale=dict(growth_interval=2000))
max_epochs = 20
runner = dict(type='CustomEpochBasedRunner', max_epochs=20)
dataset_type = 'NuScenesDataset'
dataset_root = 'data/nuscenes/'
gt_paste_stop_epoch = -1
reduce_beams = 32
load_dim = 5
use_dim = 5
load_augmented = None
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
voxel_size = [0.1, 0.1, 0.2]
image_size = [256, 704]
augment2d = dict(
    resize=[[0.38, 0.55], [0.48, 0.48]],
    rotate=[-5.4, 5.4],
    gridmask=dict(prob=0.0, fixed_prob=True))
augment3d = dict(
    scale=[0.9, 1.1], rotate=[-0.78539816, 0.78539816], translate=0.5)
object_classes = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
map_classes = [
    'drivable_area', 'ped_crossing', 'walkway', 'stop_line', 'carpark_area',
    'divider'
]
input_modality = dict(
    use_lidar=True,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ObjectPaste',
        stop_epoch=-1,
        db_sampler=dict(
            dataset_root='data/nuscenes/',
            info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
            rate=1.0,
            prepare=dict(
                filter_by_difficulty=[-1],
                filter_by_min_points=dict(
                    car=5,
                    truck=5,
                    bus=5,
                    trailer=5,
                    construction_vehicle=5,
                    traffic_cone=5,
                    barrier=5,
                    motorcycle=5,
                    bicycle=5,
                    pedestrian=5)),
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            sample_groups=dict(
                car=2,
                truck=3,
                construction_vehicle=7,
                bus=4,
                trailer=6,
                barrier=2,
                motorcycle=6,
                bicycle=6,
                pedestrian=2,
                traffic_cone=2),
            points_loader=dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams='${reduce_beams'))),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.38, 0.55],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[-5.4, 5.4],
        rand_flip=True,
        is_train=True),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[0.9, 1.1],
        rot_lim=[-0.78539816, 0.78539816],
        trans_lim=0.5,
        is_train=True),
    dict(
        type='LoadBEVSegmentation',
        dataset_root='data/nuscenes/',
        xbound=[-50.0, 50.0, 0.5],
        ybound=[-50.0, 50.0, 0.5],
        classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ]),
    dict(type='RandomFlip3D'),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='GridMask',
        use_h=True,
        use_w=True,
        max_epoch=20,
        rotate=1,
        offset=False,
        ratio=0.5,
        mode=1,
        prob=0.0,
        fixed_prob=True),
    dict(type='PointShuffle'),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_masks_bev'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'camera2lidar', 'lidar2image', 'img_aug_matrix', 'lidar_aug_matrix'
        ])
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        load_augmented=None),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=9,
        load_dim=5,
        use_dim=5,
        reduce_beams=32,
        pad_empty_sweeps=True,
        remove_close=True,
        load_augmented=None),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='ImageAug3D',
        final_dim=[256, 704],
        resize_lim=[0.48, 0.48],
        bot_pct_lim=[0.0, 0.0],
        rot_lim=[0.0, 0.0],
        rand_flip=False,
        is_train=False),
    dict(
        type='GlobalRotScaleTrans',
        resize_lim=[1.0, 1.0],
        rot_lim=[0.0, 0.0],
        trans_lim=0.0,
        is_train=False),
    dict(
        type='LoadBEVSegmentation',
        dataset_root='data/nuscenes/',
        xbound=[-50.0, 50.0, 0.5],
        ybound=[-50.0, 50.0, 0.5],
        classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ]),
    dict(
        type='PointsRangeFilter',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ImageNormalize',
        mean=[0.485, 0.456, 0.406],
        std=[0.229, 0.224, 0.225]),
    dict(
        type='DefaultFormatBundle3D',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='Collect3D',
        keys=['img', 'points', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_masks_bev'],
        meta_keys=[
            'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
            'camera2lidar', 'lidar2image', 'img_aug_matrix', 'lidar_aug_matrix'
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=1,
    train=dict(
        type='CBGSDataset',
        dataset=dict(
            type='NuScenesDataset',
            dataset_root='data/nuscenes/',
            ann_file='data/nuscenes/nuscenes_infos_train.pkl',
            pipeline=[
                dict(type='LoadMultiViewImageFromFiles', to_float32=True),
                dict(
                    type='LoadPointsFromFile',
                    coord_type='LIDAR',
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    load_augmented=None),
                dict(
                    type='LoadPointsFromMultiSweeps',
                    sweeps_num=9,
                    load_dim=5,
                    use_dim=5,
                    reduce_beams=32,
                    pad_empty_sweeps=True,
                    remove_close=True,
                    load_augmented=None),
                dict(
                    type='LoadAnnotations3D',
                    with_bbox_3d=True,
                    with_label_3d=True,
                    with_attr_label=False),
                dict(
                    type='ObjectPaste',
                    stop_epoch=-1,
                    db_sampler=dict(
                        dataset_root='data/nuscenes/',
                        info_path='data/nuscenes/nuscenes_dbinfos_train.pkl',
                        rate=1.0,
                        prepare=dict(
                            filter_by_difficulty=[-1],
                            filter_by_min_points=dict(
                                car=5,
                                truck=5,
                                bus=5,
                                trailer=5,
                                construction_vehicle=5,
                                traffic_cone=5,
                                barrier=5,
                                motorcycle=5,
                                bicycle=5,
                                pedestrian=5)),
                        classes=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        sample_groups=dict(
                            car=2,
                            truck=3,
                            construction_vehicle=7,
                            bus=4,
                            trailer=6,
                            barrier=2,
                            motorcycle=6,
                            bicycle=6,
                            pedestrian=2,
                            traffic_cone=2),
                        points_loader=dict(
                            type='LoadPointsFromFile',
                            coord_type='LIDAR',
                            load_dim=5,
                            use_dim=5,
                            reduce_beams='${reduce_beams'))),
                dict(
                    type='ImageAug3D',
                    final_dim=[256, 704],
                    resize_lim=[0.38, 0.55],
                    bot_pct_lim=[0.0, 0.0],
                    rot_lim=[-5.4, 5.4],
                    rand_flip=True,
                    is_train=True),
                dict(
                    type='GlobalRotScaleTrans',
                    resize_lim=[0.9, 1.1],
                    rot_lim=[-0.78539816, 0.78539816],
                    trans_lim=0.5,
                    is_train=True),
                dict(
                    type='LoadBEVSegmentation',
                    dataset_root='data/nuscenes/',
                    xbound=[-50.0, 50.0, 0.5],
                    ybound=[-50.0, 50.0, 0.5],
                    classes=[
                        'drivable_area', 'ped_crossing', 'walkway',
                        'stop_line', 'carpark_area', 'divider'
                    ]),
                dict(type='RandomFlip3D'),
                dict(
                    type='PointsRangeFilter',
                    point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
                dict(
                    type='ObjectRangeFilter',
                    point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
                dict(
                    type='ObjectNameFilter',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='ImageNormalize',
                    mean=[0.485, 0.456, 0.406],
                    std=[0.229, 0.224, 0.225]),
                dict(
                    type='GridMask',
                    use_h=True,
                    use_w=True,
                    max_epoch=20,
                    rotate=1,
                    offset=False,
                    ratio=0.5,
                    mode=1,
                    prob=0.0,
                    fixed_prob=True),
                dict(type='PointShuffle'),
                dict(
                    type='DefaultFormatBundle3D',
                    classes=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ]),
                dict(
                    type='Collect3D',
                    keys=[
                        'img', 'points', 'gt_bboxes_3d', 'gt_labels_3d',
                        'gt_masks_bev'
                    ],
                    meta_keys=[
                        'camera_intrinsics', 'camera2ego', 'lidar2ego',
                        'lidar2camera', 'camera2lidar', 'lidar2image',
                        'img_aug_matrix', 'lidar_aug_matrix'
                    ])
            ],
            object_classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            map_classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area', 'divider'
            ],
            modality=dict(
                use_lidar=True,
                use_camera=True,
                use_radar=False,
                use_map=False,
                use_external=False),
            test_mode=False,
            use_valid_flag=True,
            box_type_3d='LiDAR')),
    val=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='LoadBEVSegmentation',
                dataset_root='data/nuscenes/',
                xbound=[-50.0, 50.0, 0.5],
                ybound=[-50.0, 50.0, 0.5],
                classes=[
                    'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                    'carpark_area', 'divider'
                ]),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'gt_bboxes_3d', 'gt_labels_3d',
                    'gt_masks_bev'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'camera2lidar', 'lidar2image',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ])
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=False,
        box_type_3d='LiDAR'),
    test=dict(
        type='NuScenesDataset',
        dataset_root='data/nuscenes/',
        ann_file='data/nuscenes/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadPointsFromFile',
                coord_type='LIDAR',
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                load_augmented=None),
            dict(
                type='LoadPointsFromMultiSweeps',
                sweeps_num=9,
                load_dim=5,
                use_dim=5,
                reduce_beams=32,
                pad_empty_sweeps=True,
                remove_close=True,
                load_augmented=None),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='ImageAug3D',
                final_dim=[256, 704],
                resize_lim=[0.48, 0.48],
                bot_pct_lim=[0.0, 0.0],
                rot_lim=[0.0, 0.0],
                rand_flip=False,
                is_train=False),
            dict(
                type='GlobalRotScaleTrans',
                resize_lim=[1.0, 1.0],
                rot_lim=[0.0, 0.0],
                trans_lim=0.0,
                is_train=False),
            dict(
                type='LoadBEVSegmentation',
                dataset_root='data/nuscenes/',
                xbound=[-50.0, 50.0, 0.5],
                ybound=[-50.0, 50.0, 0.5],
                classes=[
                    'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                    'carpark_area', 'divider'
                ]),
            dict(
                type='PointsRangeFilter',
                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
            dict(
                type='ImageNormalize',
                mean=[0.485, 0.456, 0.406],
                std=[0.229, 0.224, 0.225]),
            dict(
                type='DefaultFormatBundle3D',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'img', 'points', 'gt_bboxes_3d', 'gt_labels_3d',
                    'gt_masks_bev'
                ],
                meta_keys=[
                    'camera_intrinsics', 'camera2ego', 'lidar2ego',
                    'lidar2camera', 'camera2lidar', 'lidar2image',
                    'img_aug_matrix', 'lidar_aug_matrix'
                ])
        ],
        object_classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        map_classes=[
            'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
            'carpark_area', 'divider'
        ],
        modality=dict(
            use_lidar=True,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        test_mode=True,
        box_type_3d='LiDAR'))
evaluation = dict(
    interval=1,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='LoadPointsFromFile',
            coord_type='LIDAR',
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            load_augmented=None),
        dict(
            type='LoadPointsFromMultiSweeps',
            sweeps_num=9,
            load_dim=5,
            use_dim=5,
            reduce_beams=32,
            pad_empty_sweeps=True,
            remove_close=True,
            load_augmented=None),
        dict(
            type='LoadAnnotations3D',
            with_bbox_3d=True,
            with_label_3d=True,
            with_attr_label=False),
        dict(
            type='ImageAug3D',
            final_dim=[256, 704],
            resize_lim=[0.48, 0.48],
            bot_pct_lim=[0.0, 0.0],
            rot_lim=[0.0, 0.0],
            rand_flip=False,
            is_train=False),
        dict(
            type='GlobalRotScaleTrans',
            resize_lim=[1.0, 1.0],
            rot_lim=[0.0, 0.0],
            trans_lim=0.0,
            is_train=False),
        dict(
            type='LoadBEVSegmentation',
            dataset_root='data/nuscenes/',
            xbound=[-50.0, 50.0, 0.5],
            ybound=[-50.0, 50.0, 0.5],
            classes=[
                'drivable_area', 'ped_crossing', 'walkway', 'stop_line',
                'carpark_area', 'divider'
            ]),
        dict(
            type='PointsRangeFilter',
            point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
        dict(
            type='ImageNormalize',
            mean=[0.485, 0.456, 0.406],
            std=[0.229, 0.224, 0.225]),
        dict(
            type='DefaultFormatBundle3D',
            classes=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ]),
        dict(
            type='Collect3D',
            keys=[
                'img', 'points', 'gt_bboxes_3d', 'gt_labels_3d', 'gt_masks_bev'
            ],
            meta_keys=[
                'camera_intrinsics', 'camera2ego', 'lidar2ego', 'lidar2camera',
                'camera2lidar', 'lidar2image', 'img_aug_matrix',
                'lidar_aug_matrix'
            ])
    ])
model = dict(
    type='CNNVQVAE',
    patch_size=8,
    encoder=dict(
        type='SampleEncoderAutoAugment',
        latent_dim=128,
        image_channels=6,
        channels=[64, 128],
        augment=3),
    codebook=dict(
        type='NormEMAVectorQuantizer',
        codebook_dim=128,
        codebook_size=256,
        codebook_beta=1,
        decay=0.99,
        eps='1e-5'),
    decoder=dict(
        type='Decoder',
        latent_dim=128,
        image_channels=6,
        channels=[512, 256, 256, 128],
        attn_resolutions=[16],
        num_res_blocks=3,
        resolution=16))
optimizer = dict(
    type='AdamW',
    lr=0.0001,
    weight_decay=0.01,
    paramwise_cfg=dict(
        custom_keys=dict(
            absolute_pos_embed=dict(decay_mult=0),
            relative_position_bias_table=dict(decay_mult=0))))
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(policy='cyclic')
momentum_config = dict(policy='cyclic')
run_dir = 'workdir/tmp'

2024-11-07 16:23:53,690 - mmdet3d - INFO - Set random seed to 0, deterministic mode: False
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 65262 truck database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 161928 pedestrian database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 339949 car database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 2120 movable_object.debris database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 62964 traffic_cone database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 8846 motorcycle database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 2259 static_object.bicycle_rack database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 19195 movable_object.pushable_pullable database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 11 vehicle.emergency.ambulance database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 11050 construction_vehicle database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 19202 trailer database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 107507 barrier database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 8185 bicycle database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 12286 bus database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 498 vehicle.emergency.police database infos
2024-11-07 16:24:15,802 - mmdet3d - INFO - load 751 human.pedestrian.stroller database infos
2024-11-07 16:24:15,803 - mmdet3d - INFO - load 619 animal database infos
2024-11-07 16:24:15,803 - mmdet3d - INFO - load 492 human.pedestrian.wheelchair database infos
2024-11-07 16:24:15,803 - mmdet3d - INFO - load 352 human.pedestrian.personal_mobility database infos
2024-11-07 16:24:17,443 - mmdet3d - INFO - After filter database:
2024-11-07 16:24:17,445 - mmdet3d - INFO - load 51854 truck database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 122405 pedestrian database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 214084 car database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 2120 movable_object.debris database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 39825 traffic_cone database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 6584 motorcycle database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 2259 static_object.bicycle_rack database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 19195 movable_object.pushable_pullable database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 11 vehicle.emergency.ambulance database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 9803 construction_vehicle database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 16770 trailer database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 87434 barrier database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 5984 bicycle database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 10100 bus database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 498 vehicle.emergency.police database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 751 human.pedestrian.stroller database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 619 animal database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 492 human.pedestrian.wheelchair database infos
2024-11-07 16:24:17,446 - mmdet3d - INFO - load 352 human.pedestrian.personal_mobility database infos
2024-11-07 16:24:19,294 - mmdet3d - INFO - Model:
CNNVQVAE(
  (encoder): SampleEncoderAutoAugment(
    (model): Sequential(
      (0): Sequential(
        (0): Conv2d(6, 64, kernel_size=(3, 3), stride=(1, 1))
        (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (2): Sequential(
        (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1))
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
      (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (codebook): NormEMAVectorQuantizer(
    (embedding): EmbeddingEMA()
  )
  (decoder): Decoder(
    (model): Sequential(
      (0): Conv2d(128, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (2): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
        )
        (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (3): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (4): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (5): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
        )
        (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (6): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (7): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
        )
        (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (8): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (9): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
        )
        (q): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (10): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 512, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (channel_up): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (11): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
        )
        (q): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (12): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (13): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
        )
        (q): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (14): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (15): NonLocalBlock(
        (gn): GroupNorm(
          (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
        )
        (q): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (k): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (v): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        (proj_out): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (16): UpSampleBlock(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (17): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (18): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (19): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (20): UpSampleBlock(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (21): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 256, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (channel_up): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (22): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (23): ResidualBlock(
        (block): Sequential(
          (0): GroupNorm(
            (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
          )
          (1): Swish()
          (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (3): GroupNorm(
            (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
          )
          (4): Swish()
          (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
      (24): UpSampleBlock(
        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (25): GroupNorm(
        (gn): GroupNorm(32, 128, eps=1e-06, affine=True)
      )
      (26): Swish()
      (27): Conv2d(128, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
  )
)
2024-11-07 16:24:35,483 - mmdet3d - INFO - Start running, host: ywzhang@ubuntu18, work_dir: /data/ywzhang/open-code/VQ-Map/vq_map_sur/workdir/tmp
2024-11-07 16:24:35,484 - mmdet3d - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CyclicLrUpdaterHook                
(HIGH        ) CyclicMomentumUpdaterHook          
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) DistEvalHook                       
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(NORMAL      ) DistSamplerSeedHook                
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2024-11-07 16:24:35,485 - mmdet3d - INFO - workflow: [('train', 1)], max: 20 epochs
2024-11-07 16:24:35,487 - mmdet3d - INFO - Checkpoints will be saved to /data/ywzhang/open-code/VQ-Map/vq_map_sur/workdir/tmp by HardDiskBackend.
2024-11-07 16:25:27,285 - mmdet3d - INFO - Epoch [1][50/30895]	lr: 1.000e-04, eta: 7 days, 9:11:04, time: 1.032, data_time: 0.870, memory: 1912, loss/reconstruction: 0.2912, loss/codebook: 2.2341, perplexity: 10.5694, loss: 2.5253, grad_norm: 3.1934
2024-11-07 16:26:11,966 - mmdet3d - INFO - Epoch [1][100/30895]	lr: 1.000e-04, eta: 6 days, 21:16:32, time: 0.894, data_time: 0.735, memory: 1912, loss/reconstruction: 0.2258, loss/codebook: 0.8590, perplexity: 9.5588, loss: 1.0848, grad_norm: 1.5465
2024-11-07 16:26:57,457 - mmdet3d - INFO - Epoch [1][150/30895]	lr: 1.000e-04, eta: 6 days, 18:11:48, time: 0.909, data_time: 0.752, memory: 1912, loss/reconstruction: 0.1972, loss/codebook: 0.4412, perplexity: 9.4706, loss: 0.6383, grad_norm: 1.0350
